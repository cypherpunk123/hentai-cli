#!/bin/sh

c_red="\033[1;31m"
c_green="\033[1;32m"
c_yellow="\033[1;33m"
c_blue="\033[1;34m"
c_magenta="\033[1;35m"
c_cyan="\033[1;36m"
c_reset="\033[0m"

help_text () {
        while IFS= read -r line; do
	    printf "%s\n" "$line"
	done <<-EOF
	Usage:
	    ${0##*/} [-d | -p <download_dir>] [<query>]
	    ${0##*/} [-v] [<query>]
	    ${0##*/} -h
	
	Options:
	    -h show helptext
	    -d download episode
	    -r download episode to specified directory
	    -v use VLC as the media player
	    -p select provider [1: hentaimama, 2: hentaihaven, 3: hanime.tv, 4: hentaigasm]
	EOF
}

err () {
	printf "$c_red%s$c_reset\n" "$*" >&2
}

get_query () {
	[ -z "$*" ] && printf "${c_magenta}Search Anime\n>${c_reset} " && read -r query || query=$*
	query=$(printf "%s" "$query" | tr " " "+")
}

input() {
    #printf "$c_yellow Episode??(1-%s)>$c_reset " "$1"
    printf "${c_magenta}To specify a range, use: start_number end_number (Episodes: 1-%s)\n>$c_reset " "$1"
	read -r x
	while [ -z "$x" ] || ! [ "$x" -eq "$x" ] 2>/dev/null || [ "$x" -lt "1" ] 2>/dev/null || [ "$x" -gt "$1" ] 2>/dev/null ;do 
	    err "Invalid choice"
	    printf "${c_magenta}To specify a range, use: start_number end_number (Episodes: 1-%s)\n>$c_reset " "$1"
	    #printf "$c_yellow Episode??(1-%s)>$c_reset " "$1"
	    read -r x
	done
	ep_no=$x
	unset x
}

stream () {
	case $player_fn in 
		vlc)
			uname -a | grep -qE "[Aa]ndroid" && am start --user 0 -a android.intent.action.VIEW -d "$1" -n org.videolan.vlc/org.videolan.vlc.gui.video.VideoPlayerActivity -e "title" "$2" > /dev/null 2>&1 || setsid -f "$player_fn" --http-referrer="$base_url" "$1" > /dev/null 2>&1;;
		mpv)
			if [ "$provider" -ne 2 ]; then
				uname -a | grep -qE "[Aa]ndroid" && am start --user 0 -a android.intent.action.VIEW -d "$1" -n is.xyz.mpv/.MPVActivity > /dev/null 2>&1 || setsid -f "$player_fn" "$1" --referrer="$base_url" --force-media-title="$2" > /dev/null 2>&1
			else
				mpv /tmp/hentai.m3u8
			fi
			;;
	esac
}

download () {
	printf "${c_blue}Downloading %s${c_reset}\n" "$2"
	case $1 in
	    *m3u8)
		    ffmpeg -loglevel error -stats -referer "$base_url" -i "$1" -c copy "$download_dir/$u2.mp4";;
	    *)
		    aria2c --summary-interval=0 -x 16 -s 16 --referer="$base_url" "$1" --dir=$download_dir -o "$2.mp4" --download-result=hide;;
	esac
}

get_show() {
	echo $provider
	printf "Getting shows from $base_url"
	case $provider in
	    1)	results=$(curl -s "$base_url/?s=$query" | sed -nE 's_^[[:space:]]*<a href="https://hentaimama.io/tvshows/(.*)/">.$_\1_p');;
	    2)	results=$(curl -s "$base_url/?s=$query&post_type=wp-manga" | sed -nE 's_.*<a href="https://hentaihaven.xxx/watch/(.*)/">.*_\1_p') ;;
	    3)	results=$(curl -s -X POST "https://search.htv-services.com/" -A uwu -d "{\"search_text\":\"$query\",\"tags\": [],\"tags_mode\": \"AND\",\"brands\": [],\"blacklist\": [],\"order_by\": \"created_at_unix\",\"ordering\": \"desc\",\"page\": 0 }" -H 'content-type:application/json' | tr '{|}' '\n' | tr -d '\\' | sed -nE 's_.*slug":"([^"]*)".*_\1_p') ;;
	    4) results=$(curl -s "http://hentaigasm.com/?s=toshi" | sed -nE 's_.*<a href="http://hentaigasm.com/(.*)/" rel="bookmark".*_\1_p') ;;
	esac
	[ -z "$results" ] && printf "\33[2K\r${c_red}No search results found${c_reset}" && exit 0
	result=$(printf "%s" "$results" | fzf)
	[ -z "$result" ] && err "No hentai selected" && exit 0
	case $provider in
	    1)	ep_list=$(curl -s "$base_url/tvshows/$result/" | sed -nE 's_^[[:space:]]*<a href="https://hentaimama.io/(.*)/">.$_\1_p' | tac);;
	    2)	ep_list=$(curl -s "https://hentaihaven.xxx/watch/$result/" | sed -nE ' s_.*<a href="https://hentaihaven.xxx/watch/'"$result"'/(.*)">.*_\1_p' | grep -v ' ' | tac);;
	    3)	ep_list=$result;;
	    4)  ep_list=$result;;
	esac
	noofeps=$(printf "%s\n" "$ep_list" | wc -l)
	[ "$noofeps" -eq 1 ] && ep_no=1 || input "$noofeps"
	get_ep_link
}

get_ep_link(){
	tput clear
	printf "${c_blue}Loading Episode $ep_no"
	ep_id=$(printf "%s" "$ep_list" | sed -n "${ep_no}p")
	if [ "$provider" -eq 1 ];then
	    printf "\n $ep_id"
	    id=$(curl -s "$base_url/$ep_id/" | sed -nE "s/.*?p=([^']*)'.*/\1/p")
	fi
	display=$(printf "%s" "$ep_id" | cut -d'/' -f2- | tr "-" " ")
	play_link
}

play_link() {
	printf "\33[2K\r${c_blue}Fetching video link"
	if [ "$provider" == 1 ]; then
		video_link="$(curl -s "$(curl -s "$base_url/wp-admin/admin-ajax.php" -d "action=get_player_contents&a=$id" -H "X-Requested-With:XMLHttpRequest" | tr -d '\\' | sed -nE 's/.*src="(.*)" width.*,.*/\1/p')" | sed -nE 's/[[:space:]]*<source src="(.*)" typ.*/\1/p;s/[[:space:]]*file: "(.*)".$/\1/p' | head -1)"
	elif [ "$provider" == 3 ]; then
		video_link="$(curl -s "https://hanime.tv/api/v8/video?id=$ep_id&" -A uwu | tr '{|}' '\n' | sed -nE 's_.*height.*"url":"([^"]+)".*_\1_p' | head -1)"
	else
		video_link="$(curl -s -H 'Host: mymaster-uk.cyou' http://135.181.139.178/api/v3/hh/"`curl -s $base_url/watch/$result/ | grep "preview-$ep_id" | sed -r 's/<img src="(\S+)".*/\1/g' | sed -r 's/.*hh\/(\S+)\/.*/\1/g'`"/7sop/index.txt > /tmp/hentai.m3u8)"
	fi

	if [ -z "$video_link" ]; then 
	    printf "\33[2K\r${c_red}Video Url not found${c_reset}\n"
	else
	    printf "\33[2K\r${c_green}Video link fetched${c_reset}\n"
	    printf "\n%s\n" "$video_link"
	    if [ "$is_download" -eq "0" ];then
		stream "$video_link" "$display" "$provider"
	    else
		download "$video_link" "$display"
	    fi
	fi
}

trap "exit 0" INT HUP
base_url="https://hentaimama.io"
provider=1
player_fn="mpv"
is_download=0
download_dir=.

while getopts 'p:dhp:v' OPT; do
        case $OPT in
		p)
			provider=$OPTARG
			if [ "$provider" == 2 ]; then
				base_url="https://hentaihaven.xxx"
			fi
			;;
                d)
                        is_download=1
                        ;;
                r)
                        is_download=1
			download_dir=$OPTARG
                        ;;
                v)
                        player_fn="vlc"
                        ;;
                *|h)
                        help_text
                        exit 0
                        ;;
	esac
done
shift $((OPTIND - 1))

get_query "$*"
get_show

while :; do
        printf "\n${c_green}Currently playing %s/%s\n" "$display" "$noofeps"
	printf "$c_cyan(%s) %s$c_reset\n" "r" "replay"
        [ "$ep_no" != "$noofeps" ] && printf "$c_yellow(%s) %s$c_reset\n" "n" "next"
        [ "$ep_no" != "1" ] && printf "$c_cyan(%s) %s$c_reset\n" "p" "previous"
	printf "$c_magenta(%s) %s$c_reset\n" "d" "download current video"
        printf "$c_blue(%s) %s$c_reset\n" "e" "select episode"
	printf "$c_reset(%s) %s$c_reset\n" "a" "search another series"
	printf "$c_red(%s) %s$c_reset\n" "q" "exit"
        printf "${c_green}>$c_reset "
        read choice
        case $choice in
		r)
			play_link;;
                d)
			download "$video_link" "$display";;
                n)
			ep_no=$((ep_no + 1))
			[ "$ep_no" -gt "$noofeps" ] && err "Episode out of range" && ep_no=$((ep_no-1)) || get_ep_link;;
                p)
			ep_no=$((ep_no - 1))
			[ "$ep_no" -lt "1" ] && err "Episode out of range" && ep_no=$((ep_no+1)) || get_ep_link;;
                e)
			input "$noofeps"
                        get_ep_link;;
		a)
			get_query "$*"
			get_show;;
                q)
                        break;;
                *)
                        err "invalid choice";;
        esac
done
