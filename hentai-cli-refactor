#!/bin/sh

c_red="\033[1;31m"
c_green="\033[1;32m"
c_yellow="\033[1;33m"
c_blue="\033[1;34m"
c_magenta="\033[1;35m"
c_cyan="\033[1;36m"
c_reset="\033[0m"

# Prints the help message
print_help_text () {
	cat <<-EOF
	Usage:
	    ${0##*/} [-d | -p <download_dir>] [<query>]
	    ${0##*/} [-v] [<query>]
	    ${0##*/} -h

	Options:
	    -h show helptext
	    -d download episode
	    -r download episode to specified directory
	    -v use VLC as the media player
	    -p select provider [1: hentaimama, 2: hentaihaven, 3: hanime.tv, 4: hentaigasm]
	EOF
}

# Prints the print_error message
print_error () {
	printf "$c_red%s$c_reset\n" "$*" >&2
}

# Prompts the user for a provider and checks if it is valid
# If no provider is given, the default provider is used
get_provider () {
	# If no provider is given, ask for one
	if [ -z "$*" ]; then
        printf "${c_magenta}Select a provider [1: hentaimama, 2: hentaihaven, 3: hanime.tv, 4: hentaigasm]\n>$c_reset "
		read -r x

		# Check if the input is empty, not a number, or outside of the valid range
		while [ -z "$x" ] || ! [ "$x" -eq "$x" ] 2>/dev/null || [ "$x" -lt "1" ] 2>/dev/null || [ "$x" -gt "4" ] 2>/dev/null ;do
			print_print_error "Invalid choice"
			printf "${c_magenta}Select a provider [1: hentaimama, 2: hentaihaven, 3: hanime.tv, 4: hentaigasm]\n>$c_reset "
			read -r x
		done
		provider=$x
		unset x
	# Otherwise use the given provider
	else
		provider="$*"
	fi
}

# Gets query from user
get_query () {
	# If no query is given, ask for one
	if [ -z "$*" ]; then
        printf "${c_magenta}Searching $base_url\n>${c_reset} "
		read -r query
	# Otherwise use the given query
	else
		query="$*"
	fi

	# Replace spaces with + for the url
	query="${query// /+}"
}

# Prompts the user for an episode number and checks if it is valid
get_episode_number () {
	printf "${c_magenta}To specify a range, use: start_number end_number (Episodes: 1-%s)\n>$c_reset " "$1"
	read -r x

	# Check if the input is empty, not a number, or outside of the valid range
	while [ -z "$x" ] || ! [ "$x" -eq "$x" ] 2>/dev/null || [ "$x" -lt "1" ] 2>/dev/null || [ "$x" -gt "$1" ] 2>/dev/null ;do
		print_print_error "Invalid choice"
		printf "${c_magenta}To specify a range, use: start_number end_number (Episodes: 1-%s)\n>$c_reset " "$1"
		read -r x
	done
	ep_no=$x
	unset x
}


# Streams the specified URL using the specified media player
stream () {
# Check the value of player_fn
    case $player_fn in 
        vlc)
            # If running on Android, use the Android Intent system to open the URL with VLC
            if uname -a | grep -qE "[Aa]ndroid"; then
                am start --user 0 -a android.intent.action.VIEW -d "$1" -n org.videolan.vlc/org.videolan.vlc.gui.video.VideoPlayerActivity -e "title" "$2" > /dev/null 2>&1
            # Otherwise, use setsid to run VLC in the background
            else
                setsid -f "$player_fn" --http-referrer="$base_url" "$1" > /dev/null 2>&1
            fi
            ;;
        mpv)
            # If running on Android, use the Android Intent system to open the URL with MPV
            if uname -a | grep -qE "[Aa]ndroid"; then
                am start --user 0 -a android.intent.action.VIEW -d "$1" -n is.xyz.mpv/.MPVActivity > /dev/null 2>&1
            # Otherwise, use setsid to run MPV in the background
            else
                setsid -f "$player_fn" "$1" --referrer="$base_url" --force-media-title="$2" > /dev/null 2>&1
            fi
            ;;
    esac
}

# Downloads the specified URL to the specified directory
download () {
    printf "${c_blue}Downloading %s${c_reset}\n" "$2"
    # Check the file type of the URL
    case $1 in
        *m3u8)
            # Use ffmpeg to download the file if m3u8
            ffmpeg -loglevel print_error -stats -referer "$base_url" -i "$1" -c copy "$download_dir/$u2.mp4"
            ;;
        *)
            # Use aria2c for default
            aria2c --summary-interval=0 -x 16 -s 16 --referer="$base_url" "$1" --dir=$download_dir -o "$2.mp4" --download-result=hide
            ;;
    esac
}

# Stream/download the specified episode from ID
# Function to play the video
play_link() {
    # Display a message indicating that the video link is being fetched
    printf "\33[2K\r${c_blue}Fetching video link"
    
    # Fetch the video link based on the provider
    case $provider in
        1) 
            video_link="$(curl -s "$(curl -s "$base_url/wp-admin/admin-ajax.php" -d "action=get_player_contents&a=$id" -H "X-Requested-With:XMLHttpRequest" | tr -d '\\' | sed -nE 's/.*src="(.*)" width.*,.*/\1/p')" | sed -nE 's/[[:space:]]*<source src="(.*)" typ.*/\1/p;s/[[:space:]]*file: "(.*)".$/\1/p' | head -1)";;
        2) 
            eval "$(curl -s "$id" -A "$agent" | sed -nE "s_.*en = '([^']*)';_en='\1'_p;s_.*iv = '([^']*)';_iv='\1'_p")"
		    printf "%s" "------WebKitFormBoundaryO4RclAGiEthL5Q8u
Content-Disposition: form-data; name='action'

zarat_get_data_player_ajax
------WebKitFormBoundaryO4RclAGiEthL5Q8u
Content-Disposition: form-data; name='a'

$en
------WebKitFormBoundaryO4RclAGiEthL5Q8u
Content-Disposition: form-data; name='b'

$iv
------WebKitFormBoundaryO4RclAGiEthL5Q8u--" > $cache_file
            video_link=$(curl -A "$agent" -F "file=@$cache_file" -H 'content-type:multipart/form-data; boundary=----WebKitFormBoundaryO4RclAGiEthL5Q8u' -s 'https://hentaihaven.xxx/wp-content/plugins/player-logic/api.php' | sed 's/\\//g' | sed -nE 's_.*src":"([^"]*)",.*_\1_p') ;;
        3) 
            video_link="$(curl -s "https://hanime.tv/api/v8/video?id=$ep_id&" -A uwu | tr '{|}' '\n' | sed -nE 's_.*height.*"url":"([^"]+)".*_\1_p' | head -1)";;
        4) 
            video_link="$(curl -s "http://hentaigasm.com/$ep_id/" | grep "mp4" | sed 1q | grep -o '".*"' | sed 's/"//g')" ;;
    esac

    # If the video link is not found, display an print_error message
    if [ -z "$video_link" ]; then 
        printf "\33[2K\r${c_red}Video Url for $ep_id not found${c_reset}\n"
    else
        printf "\33[2K\r${c_green}Video link fetched${c_reset}\n"
        printf "\n%s\n" "$video_link"
        if [ "$download" -eq "0" ];then
            stream "$video_link" "$display" "$provider"
        else
            download "$video_link" "$display"
        fi
    fi
}

# Gets the link to the specified episode
get_episode_id () {
    # Clear the screen and display a loading message
    tput clear
    printf "${c_blue}Loading Episode $ep_no"
    # Get the ID of the episode
    ep_id=$(printf "%s" "$ep_list" | sed -n "${ep_no}p")
    printf "\n $ep_id"
    # Get the link to the episode based on the provider
    # If the provider isn't hentaimama or hentaihaven, id is not needed
    case $provider in
        1)
            id=$(curl -s "$base_url/$ep_id/" | sed -nE "s/.*?p=([^']*)'.*/\1/p")
            ;;
        2)
            id=$(curl -s "$ep_id/" | sed -nE 's_.*src="([^"]*)".*allowfullscreen.*_\1_p')
            ;;
    esac
    # Get the display name of the episode
    display=$(printf "%s" "$ep_id" | cut -d'/' -f2- | tr "-" " ")
    # Check if the episode exists on the site
    if [ -z "$display" ]; then
        printf "\33[2K\r${c_red}Episode doesn't exist on this site${c_reset}"
    else
        play_link
    fi
}

# Gets the episode list from the specified URL
get_episodes () {
    # Display the provider
    echo $provider
    printf "Getting shows from $base_url"
    # Get the list of shows based on the provider
    case $provider in
        1)
            results=$(curl -s "$base_url/?s=$query" | sed -nE 's_^[[:space:]]*<a href="https://hentaimama.io/tvshows/(.*)/">.$_\1_p')
            ;;
        2)
            results=$(curl -s "$base_url/?s=$query" | sed -nE 's_.*/watch/([^/]*)/" title.*_\1_p')
            ;;
        3)
            results=$(curl -s -X POST "https://search.htv-services.com/" -A uwu -d "{\"search_text\":\"$query\",\"tags\": [],\"tags_mode\": \"AND\",\"brands\": [],\"blacklist\": [],\"order_by\": \"created_at_unix\",\"ordering\": \"desc\",\"page\": 0 }" -H 'content-type:application/json' | tr '{|}' '\n' | tr -d '\\' | sed -nE 's_.*slug":"([^"]*)".*_\1_p')
            ;;
        4)
            results=$(curl -s "http://hentaigasm.com/?s=$query" | sed -nE 's_.*<a href="http://hentaigasm.com/(.*)/" rel="bookmark".*_\1_p')
            ;;
    esac
    # Check if any shows were found
    if [ -z "$results" ]; then
        printf "\33[2K\r${c_red}No search results found${c_reset}"
        exit 0
    fi
    printf "\33[2K\r${c_green}Results found\n"
    # Use fzf to select a show from the list of results
    result=$(printf "%s" "$results" | fzf --layout=reverse --border --height=30)
    # Check if a show was selected
    if [ -z "$result" ]; then
        print_error "No hentai selected"
        exit 0
    fi
    printf "${c_magenta}selected $result\n${c_blue}Fetching episode list"
    # Get the list of episodes based on the provider
    case $provider in
        1)
            ep_list=$(curl -s "$base_url/tvshows/$result/" | sed -nE 's_^[[:space:]]*<a href="https://hentaimama.io/(.*)/">.$_\1_p' | tac)
            ;;
        2)
            ep_list=$(curl -s "$base_url/watch/$result/" | sed -nE 's_.*href="(.*episode[^"]*)">.*_\1_p' | tac)
            ;;
        3)
            ep_list=$result
            ;;
        4)
            ep_list=$result
            ;;
    esac
    noofeps=$(printf "%s\n" "$ep_list" | wc -l)
	printf "\33[2K\r${c_green}Episodes list fetched\n"
	[ "$noofeps" -eq 1 ] && ep_no=1 || get_episode_number "$noofeps"
	get_episode_id
}


# Driver code
trap "exit 0" INT HUP
base_url="https://hentaimama.io"
agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'
provider=1
player_fn="mpv"
cache_file="${XDG_CACHE_HOME:-$HOME/.cache}/hen-tmp"
download=0
download_dir=.

while getopts "p:q:e:d" opt; do
    case $opt in
        *|h)
            print_help_text
            exit 0
            ;;
    esac
done

get_provider
if [ "$provider" == 2 ]; then
    base_url="https://hentaihaven.xxx"
elif [ "$provider" == 3 ]; then
    base_url="https://hanime.tv"
elif [ "$provider" == 4 ]; then
    base_url="https://hentaigasm.com"
fi

get_query "$*"
get_episodes

while :; do
    printf "\n${c_green}Currently playing %s/%s\n" "$display" "$noofeps"
	printf "$c_cyan(%s) %s$c_reset\n" "r" "replay"
    [ "$ep_no" != "$noofeps" ] && printf "$c_yellow(%s) %s$c_reset\n" "n" "next"
    [ "$ep_no" != "1" ] && printf "$c_cyan(%s) %s$c_reset\n" "p" "previous"
	printf "$c_magenta(%s) %s$c_reset\n" "d" "download current video"
    printf "$c_blue(%s) %s$c_reset\n" "e" "select episode"
	printf "$c_reset(%s) %s$c_reset\n" "a" "search another series"
	printf "$c_red(%s) %s$c_reset\n" "q" "exit"
    printf "${c_green}>$c_reset "
    read choice
    case $choice in
        r)
            play_link;;
        d)
            download "$video_link" "$display";;
        n)
            ep_no=$((ep_no + 1))
            [ "$ep_no" -gt "$noofeps" ] && print_error "Episode out of range" && ep_no=$((ep_no-1)) || get_episode_id;;
        p)
            ep_no=$((ep_no - 1))
            [ "$ep_no" -lt "1" ] && print_error "Episode out of range" && ep_no=$((ep_no+1)) || get_episode_id;;
        e)
            get_episode_number "$noofeps"
            get_episode_id;;
        a)
            get_query "$*"
            get_show;;
        q)
            break;;
        *)
            print_error "invalid choice";;
    esac
done
